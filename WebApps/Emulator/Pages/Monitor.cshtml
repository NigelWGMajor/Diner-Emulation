@page
@using Emulator.Services
@*@inject Buffer<Point> Buffer*@

@model MonitorModel
@{
    ViewData["Title"] = "Monitor";


    var labels = "";
    var data = new int[] { 1, 2, 3, 4 };
}
<div class="spread ">
    <!-- Button to call  On<verb><Handler> method in code behind -->
    <form class="navitem" method="post" asp-page-handler="TableOrder">
        <button class="navitem space-low dark-edge" data-bs-toggle="tooltip" title="Take a set of orders from a table">
            <i class="space-low fa-solid fa-triangle-exclamation"></i>Order from table
        </button>
    </form>
    <form class="navitem" method="post" asp-page-handler="ClaimResponsibility">
        <button class="navitem space-low dark-edge" data-bs-toggle="tooltip" title="Claim responsibiity for a deliverable">
            <i class="space-low fa-solid fa-triangle-exclamation"></i>Claim Deliverable
        </button>
    </form>
    <form class="navitem" method="post" asp-page-handler="TrySucceed">
        <button class="navitem space-low dark-edge" data-bs-toggle="tooltip" title="Try an operationand succeed">
            <i class="space-low fa-solid fa-triangle-exclamation"></i>Do an operation
        </button>
    </form>
    <form class="navitem" method="post" asp-page-handler="TryFail">
        <button class="navitem space-low dark-edge" data-bs-toggle="tooltip" title="Try an operation and fail">
            <i class="space-low fa-solid fa-triangle-exclamation"></i>Fail an operation
        </button>
    </form>
    <!-- Button to simply call a page with data -->
    <a class="navitem no-pad" asp-area="" asp-page="/Error" asp-route-data=@Model.PageName>
        <button class="navitem space-low dark-edge" data-bs-toggle="tooltip" title="show an error">
            <i class="fa-solid fa-bug">
            </i>Test Error from @Model.PageName
        </button>
    </a>
</div>
<hr class="rule">
<div>
    <div style="width: 600px; height: 400px">
        <canvas id="myChart" width="400" height="200"></canvas>
    </div>
    <script id="data" type="application/json">
        @Json.Serialize(
        new
        {
            labels,
            limit = 40,
            url = "/chart",
            datasets = new object[]
            {
                new
                {
                    label = "A",
                    data = new [] {1, -1,1},
                    fill = false,
                    borderColor = "rgb(75, 192, 192 )",
                    tension = 0.1
                },
                new
                {
                    label = "B",
                    data = new [] {2, 2, 4},
                    fill = false,
                    borderColor = "rgb(192, 75, 192 )",
                    tension = 0.1
                },
                new
                {
                    label = "C",
                    data = new [] {0, 3, 2},
                    fill = false,
                    borderColor = "rgb(192, 192, 75 )",
                    tension = 0.1
                },
                new
                {
                    label = "D",
                    data =new[] { 4 , 0, 0},
                    fill = false,
                    borderColor = "rgb(120, 120, 120 )",
                    tension = 0.1
                }
            }
        })
    </script>
</div>
<!-- introduce a component-->
@await Component.InvokeAsync("EventLog")
<div>
</div>

<script src="~/lib/microsoft-signalr/signalr.min.js"></script>
<script src="~/lib/chartjs/chart.min.js"></script>
<script defer src="~/js/index.js"></script>

</html>
</div>


<script>


    document.addEventListener('DOMContentLoaded', (event) => {

        var ctx = document.getElementById('myChart');
        var myChart = new Chart(ctx, @Html.Raw(Model.ChartJson) );
    });
</script>

